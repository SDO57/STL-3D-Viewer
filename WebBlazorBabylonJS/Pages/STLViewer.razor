@page "/STLViewer"

@using Babylon.Blazor.Chemical
@using Core.Entities;
@using Data;

@inject HttpClient Http
@inject STLStoreService ForecastService



<h3>STLViewer (under construction)</h3>

<p> Choose STL from Store</p>


@if (files == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Filename</th>
                <th>Size</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in files)
            {
                <tr>
                    <td>@file.FileName</td>
                    <td>@file.FileSize</td>
                    <td><button>Preview</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private STLFileDescription[] files;

    private async Task ChargeSTLStore()
    {
        var Store = await ForecastService.GetForecastAsync();
        files = Store.Files.ToArray();
       


    }
   

  /*  private async Task ChargeSTLStore()
    {
         try
         {
      
        _STLFiles = new Infra.DB.Repository().GetLastStore().Files;
       
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }*/



}




<div style="height: 600px;">
    <BabylonCanvas CanvasId="CanvasTest" SceneData=@PanelData />
</div>


@code {



    ChemicalData PanelData { get; } = new ChemicalData();
    BondDescription.BondType bondType = BondDescription.BondType.Single;
    int EditionCode = 1;

    async Task RadioSelection(ChangeEventArgs args)
    {

        Console.WriteLine($"args:{args.Value},{args.Value.GetType()}");

        bondType = Enum.Parse<BondDescription.BondType>(args.Value.ToString());
        PanelData.Atoms.Clear();
        PanelData.Bonds.Clear();
        await InitDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    async Task InitDataAsync()
    {
        // Fake await line
        await Task.FromResult(1);

        CreateCube();
    }



    private void CreateCube()
    {
        PanelData.Atoms.Add(new AtomDescription(-1, -1, -1, ""));
        PanelData.Atoms.Add(new AtomDescription(-1, 1, -1, ""));
        PanelData.Atoms.Add(new AtomDescription(1, 1, -1, ""));
        PanelData.Atoms.Add(new AtomDescription(1, -1, -1, ""));
        PanelData.Atoms.Add(new AtomDescription(-1, -1, 1, ""));
        PanelData.Atoms.Add(new AtomDescription(-1, 1, 1, ""));
        PanelData.Atoms.Add(new AtomDescription(1, 1, 1, ""));
        PanelData.Atoms.Add(new AtomDescription(1, -1, 1, ""));

        PanelData.Bonds.Add(new BondDescription(1, 2, bondType));
        PanelData.Bonds.Add(new BondDescription(2, 3, bondType));
        PanelData.Bonds.Add(new BondDescription(3, 4, bondType));
        PanelData.Bonds.Add(new BondDescription(4, 1, bondType));
        PanelData.Bonds.Add(new BondDescription(5, 6, bondType));
        PanelData.Bonds.Add(new BondDescription(6, 7, bondType));
        PanelData.Bonds.Add(new BondDescription(7, 8, bondType));
        PanelData.Bonds.Add(new BondDescription(8, 5, bondType));

        PanelData.Bonds.Add(new BondDescription(1, 5, bondType));
        PanelData.Bonds.Add(new BondDescription(2, 6, bondType));
        PanelData.Bonds.Add(new BondDescription(3, 7, bondType));
        PanelData.Bonds.Add(new BondDescription(4, 8, bondType));


    }

    protected override async Task OnInitializedAsync()
    {
      await ChargeSTLStore();
       await InitDataAsync();
    }

}